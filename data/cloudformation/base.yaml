AWSTemplateFormatVersion: 2010-09-09
Parameters:
      botname:
          Type: String
          Description: Name of the reddit bot
      codebucket:
          Type: String
          Description: S3 bucket where lambda code should be saved
      checkForNewS3Version:
          Type: String
          Description: Version of the zip for checkForNew
      checkOldOneS3Version:
          Type: String
          Description: Version of the zip for checkOldOne
      poll15S3Version:
          Type: String
          Description: Version of the zip for poll15


Resources:
      ExecutionRole:
          Type: "AWS::IAM::Role"
          Properties:
             Path : "/"
             RoleName: !Join [ "-", [ "exec", !Ref "botname"] ]
             Policies:
              - PolicyName: "CloudwatchLogs"
                PolicyDocument:
                   Version   : "2012-10-17"
                   Statement :
                      - Action:
                           - cloudwatch:*
                           - logs:*
                        Resource: "*"
                        Effect: Allow
              - PolicyName: "S3"
                PolicyDocument:
                  Version  :  "2012-10-17"
                  Statement:
                     - Action:
                           - "s3:*"
                       Resource:
                           - "*"
                       Effect: Allow
                     - Action:
                           - "s3:Get*"
                           - "s3:ListBucket"
                       Resource:
                           - "arn:aws:s3:::*"
                       Effect: Allow
                     - Action:
                           - s3:ReplicateObject
                           - s3:ReplicateDelete
                           - s3:ReplicateTags
                           - s3:GetObjectVersionTagging
                       Resource:
                           - "arn:aws:s3:::tenergy-summary-b/*"
                       Effect: Allow
              - PolicyName: "SQS"
                PolicyDocument:
                  Statement:
                    - Action:
                           - sqs:*
                      Resource:
                           - "*"
                      Effect: Allow
              - PolicyName: "DynamoDB"
                PolicyDocument:
                  Statement:
                    - Action:
                           - dynamodb:*
                      Resource:
                           - "*"
                      Effect: "Allow"
              - PolicyName: "Lambda"
                PolicyDocument:
                  Statement:
                    - Action:
                           - lambda:*
                      Resource:
                           - "*"
                      Effect: "Allow"
             AssumeRolePolicyDocument :
                Statement:
                   - Action:
                         -  "sts:AssumeRole"
                     Effect: Allow
                     Principal:
                         Service: [ "lambda.amazonaws.com" ]
                   - Action:
                         -  "sts:AssumeRole"
                     Effect: Allow
                     Principal:
                         Service: [ "sns.amazonaws.com" ]
                   - Action:
                         -  "sts:AssumeRole"
                     Effect: Allow
                     Principal:
                         Service: [ "logs.ap-southeast-2.amazonaws.com" ]
      postHistoryTable:
                Type: "AWS::DynamoDB::Table"
                Properties:
                   AttributeDefinitions:
                       - AttributeName: "post_id"
                         AttributeType: "S"
                   KeySchema:
                       - AttributeName: "post_id"
                         KeyType:       "HASH"
                   ProvisionedThroughput:
                         ReadCapacityUnits: 5
                         WriteCapacityUnits: 5
      delayTable:
                Type: "AWS::DynamoDB::Table"
                Properties:
                   AttributeDefinitions:
                       - AttributeName: "time"
                         AttributeType: "N"
                   KeySchema:
                       - AttributeName: "time"
                         KeyType:       "HASH"
                   ProvisionedThroughput:
                         ReadCapacityUnits: 5
                         WriteCapacityUnits: 5
      triggerCheckForNew:
          Type: "AWS::Events::Rule"
          Properties:
              Description: "ScheduledRule"
              ScheduleExpression: "cron(0/10 * * * ? *)"
              State: "ENABLED"
              Targets:
                -
                  Arn:
                     Fn::GetAtt: ["checkForNew", "Arn"]
                  Id: "trigger_checkForNew"
      permitTriggerCheckForNew:
          Type: "AWS::Lambda::Permission"
          Properties:
             FunctionName:
                Ref: "checkForNew"
             Action: "lambda:InvokeFunction"
             Principal: "events.amazonaws.com"
             SourceArn:
                Fn::GetAtt: [ "triggerCheckForNew", "Arn"]
      checkForNew:
          Type: AWS::Lambda::Function
          Properties:
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: checkForNew.zip
              S3ObjectVersion: !Ref "checkForNewS3Version"
            Handler: main.lambda_handler
            Runtime: python3.6
            Timeout: 300
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
            Environment:
                Variables:
                   dry_run: False
                   num_to_scan: 50
                   delay_table:
                       Ref: "delayTable"
                   post_history_table:
                       Ref: "postHistoryTable"
                   delay_queue:
                       Ref: "delayQueue"
      checkOldOne:
          Type: AWS::Lambda::Function
          Properties:
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: checkOldOne.zip
              S3ObjectVersion: !Ref "checkOldOneS3Version"
            Handler: main.lambda_handler
            Runtime: python3.6
            Timeout: 300
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
            Environment:
                Variables:
                   dry_run: False
                   post_history_table:
                       Ref: "postHistoryTable"
                   delay_queue:
                       Ref: "delayQueue"
      triggerPoll15:
          Type: "AWS::Events::Rule"
          Properties:
              Description: "ScheduledRule"
              ScheduleExpression: "cron(0/15 * * * ? *)"
              State: "ENABLED"
              Targets:
                -
                  Arn:
                     Fn::GetAtt: ["poll15", "Arn"]
                  Id: "trigger_poll15"
      permitTriggerPoll15:
          Type: "AWS::Lambda::Permission"
          Properties:
             FunctionName:
                Ref: "poll15"
             Action: "lambda:InvokeFunction"
             Principal: "events.amazonaws.com"
             SourceArn:
                Fn::GetAtt: [ "triggerPoll15", "Arn"]
      poll15:
          Type: AWS::Lambda::Function
          Properties:
            Code:
              S3Bucket: !Ref "codebucket"
              S3Key: poll15.zip
              S3ObjectVersion: !Ref "poll15S3Version"
            Handler: main.lambda_handler
            Runtime: python3.6
            Timeout: 300
            Role:
                "Fn::GetAtt": ["ExecutionRole", "Arn"]
            Environment:
                Variables:
                   dry_run: False
                   post_history_table:
                       Ref: "postHistoryTable"
                   delay_table:
                       Ref: "delayTable"
                   delay_queue:
                       Ref: "delayQueue"
                   bot_name:
                       !Ref "botname"
      delayQueue:
         Type: "AWS::SQS::Queue"
         Properties:
           FifoQueue: False
